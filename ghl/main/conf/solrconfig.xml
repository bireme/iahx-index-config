<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<config>
  <!-- Set this to 'false' if you want solr to continue working after it has
       encountered an severe configuration error.  In a production environment,
       you may want solr to keep working even if one handler is mis-configured.

       You may also set this to false using by setting the system property:
         -Dsolr.abortOnConfigurationError=false
     -->
  <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

  <!-- Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.
       If replication is in use, this should match the replication configuration. -->
  <!--
  <dataDir>./solr/data</dataDir>
  -->

  <indexDefaults>
   <!-- Values here affect all index writers and act as a default unless overridden. -->
    <useCompoundFile>false</useCompoundFile>
    <mergeFactor>10</mergeFactor>
    <maxBufferedDocs>1000</maxBufferedDocs>
    <maxMergeDocs>2147483647</maxMergeDocs>
    <maxFieldLength>10000</maxFieldLength>
    <writeLockTimeout>1000</writeLockTimeout>
    <commitLockTimeout>10000</commitLockTimeout>
  </indexDefaults>

  <mainIndex>
    <!-- options specific to the main on-disk lucene index -->
    <useCompoundFile>false</useCompoundFile>
    <mergeFactor>10</mergeFactor>
    <maxBufferedDocs>10000</maxBufferedDocs>
    <maxMergeDocs>2147483647</maxMergeDocs>
    <maxFieldLength>10000</maxFieldLength>

    <!-- If true, unlock any held write or commit locks on startup.
         This defeats the locking mechanism that allows multiple
         processes to safely access a lucene index, and should be
         used with care. -->
    <unlockOnStartup>false</unlockOnStartup>
  </mainIndex>

  <!-- the default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- A prefix of "solr." for class names is an alias that
         causes solr to search appropriate packages, including
         org.apache.solr.(search|update|request|core|analysis)
     -->

    <!-- autocommit pending docs if certain criteria are met
    <autoCommit>
      <maxDocs>10000</maxDocs>
      <maxTime>1000</maxTime>
    </autoCommit>
    -->

    <!-- The RunExecutableListener executes an external command.
         exe - the name of the executable to run
         dir - dir to use as the current working directory. default="."
         wait - the calling thread waits until the executable returns. default="true"
         args - the arguments to pass to the program.  default=nothing
         env - environment variables to set.  default=nothing
      -->
    <!-- A postCommit event is fired after every commit or optimize command
    <listener event="postCommit" class="solr.RunExecutableListener">
      <str name="exe">snapshooter</str>
      <str name="dir">solr/bin</str>
      <bool name="wait">true</bool>
      <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
      <arr name="env"> <str>MYVAR=val1</str> </arr>
    </listener>
    -->
    <!-- A postOptimize event is fired only after every optimize command, useful
         in conjunction with index distribution to only distribute optimized indicies
    <listener event="postOptimize" class="solr.RunExecutableListener">
      <str name="exe">snapshooter</str>
      <str name="dir">solr/bin</str>
      <bool name="wait">true</bool>
    </listener>
    -->

  </updateHandler>
  <query>
    <maxBooleanClauses>1024</maxBooleanClauses>

    <filterCache
                class="solr.LRUCache"
                size="5000"
                initialSize="2500"
                autowarmCount="1000"/>

    <queryResultCache
                     class="solr.LRUCache"
                     size="2500"
                     initialSize="1000"
                     autowarmCount="500"/>

    <documentCache
                  class="solr.LRUCache"
                  size="1500"
                  initialSize="500"
                  autowarmCount="0"/>

    <enableLazyFieldLoading>false</enableLazyFieldLoading>

    <queryResultWindowSize>20</queryResultWindowSize>

    <HashDocSet maxSize="30000" loadFactor="0.75"/>


    <boolTofilterOptimizer enabled="true" cacheSize="32" threshold=".05"/>

    <useColdSearcher>false</useColdSearcher>

    <maxWarmingSearchers>4</maxWarmingSearchers>

   </query>


  <!--
    Let the dispatch filter handler /select?qt=XXX
    handleSelect=true will use consistent error handling for /select and /update
    handleSelect=false will use solr1.1 style error formatting
    -->
  <requestDispatcher handleSelect="true" >
    <!--Make sure your system has some authentication before enabling remote streaming!  -->
    <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" />
  </requestDispatcher>


  <!-- requestHandler plugins... incoming queries will be dispatched to the
     correct handler based on the qt (query type) param matching the
     name of registered handlers.
     The "standard" request handler is the default and will be used if qt
     is not specified in the request.
  -->
  <requestHandler name="standard" class="solr.StandardRequestHandler">
    <!-- default values for query parameters -->
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <!--
       <int name="rows">10</int>
       <str name="fl">*</str>
       <str name="version">2.1</str>
        -->
     </lst>
     <lst name="invariants">
         <str name="facet">true</str>
         <str name="facet.field">db</str>
         <str name="facet.field">regional_office</str>
         <str name="facet.field">type</str>
         <str name="facet.field">type_of_study</str>
         <str name="facet.field">tag</str>
         <str name="f.tag.facet.sort">false</str>
         <str name="f.tag.facet.limit">-1</str>

         <str name="facet.field">mh_cluster</str>

         <str name="facet.field">st_cluster1</str>
         <str name="facet.field">st_cluster2</str>
         <str name="facet.field">st_cluster3</str>
         <str name="facet.field">st_cluster4</str>

         <str name="facet.field">ta</str>
         <str name="facet.field">la</str>

         <str name="facet.field">year_cluster</str>
         <str name="facet.limit">10</str>
         <str name="facet.mincount">1</str>
     </lst>
  </requestHandler>

  <requestHandler name="bvs" class="solr.StandardRequestHandler">
    <!-- default values for query parameters -->
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <!--
          <int name="rows">10</int>
          <str name="fl">*</str>
          <str name="version">2.1</str>
          -->
        </lst>
        <lst name="invariants">
          <str name="facet">true</str>
          <str name="facet.field">db</str>
          <str name="facet.field">regional_office</str>
          <str name="facet.field">type</str>
          <str name="facet.field">type_of_study</str>
          <str name="facet.field">tag</str>
          <str name="f.tag.facet.sort">false</str>
          <str name="f.tag.facet.limit">-1</str>

          <str name="facet.field">mh_cluster</str>

          <str name="facet.field">st_cluster1</str>
          <str name="facet.field">st_cluster2</str>
          <str name="facet.field">st_cluster3</str>
          <str name="facet.field">st_cluster4</str>

          <str name="facet.field">ta</str>
          <str name="facet.field">la</str>

          <str name="facet.field">year_cluster</str>
          <str name="facet.limit">10</str>
          <str name="facet.mincount">1</str>
        </lst>
   </requestHandler>


  <!-- DisMaxRequestHandler allows easy searching across multiple fields
       for simple user-entered phrases.
       see http://wiki.apache.org/solr/DisMaxRequestHandler
   -->
  <!--
  <requestHandler name="bvs" class="solr.DisMaxRequestHandler" >
    <lst name="defaults">
     <str name="echoParams">explicit</str>
     <float name="tie">0.01</float>
     <str name="qf">
          ti^3.0 mj^2.5 mh^2.3 au^2.0 text^1.5
     </str>
     <str name="q.alt">*:*</str>
     <str name="mm">100%</str>
    </lst>
    <lst name="invariants">
        <str name="facet">true</str>
        <str name="facet.field">type</str>
        <str name="facet.field">tag</str>
        <str name="f.tag.facet.sort">false</str>
        <str name="f.tag.facet.limit">-1</str>
        <str name="facet.field">mh_cluster</str>
        <str name="facet.field">ta</str>
        <str name="facet.field">la</str>
        <str name="facet.field">year_cluster</str>
        <str name="facet.limit">10</str>
        <str name="facet.mincount">1</str>
    </lst>
  </requestHandler>
  -->

  <!-- SpellCheckerRequestHandler takes in a word (or several words) as the
       value of the "q" parameter and returns a list of alternative spelling
       suggestions.  If invoked with a ...&cmd=rebuild, it will rebuild the
       spellchecker index.
  -->
  <requestHandler name="spellchecker" class="solr.SpellCheckerRequestHandler" startup="lazy">
    <!-- default values for query parameters -->
     <lst name="defaults">
       <int name="suggestionCount">1</int>
       <float name="accuracy">0.5</float>
     </lst>

     <!-- Main init params for handler -->

     <!-- The directory where your SpellChecker Index should live.   -->
     <!-- May be absolute, or relative to the Solr "dataDir" directory. -->
     <!-- If this option is not specified, a RAM directory will be used -->
     <str name="spellcheckerIndexDir">spell</str>

     <!-- the field in your schema that you want to be able to build -->
     <!-- your spell index on. This should be a field that uses a very -->
     <!-- simple FieldType without a lot of Analysis (ie: string) -->
     <str name="termSourceField">mh</str>

   </requestHandler>


  <!-- Update request handler.

       Note: Since solr1.1 requestHandlers requires a valid content type header if posted in
       the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
       The response format differs from solr1.1 formatting and returns a standard error code.

       To enable solr1.1 behavior, remove the /update handler or change its path
    -->
  <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

  <!-- CSV update handler, loaded on demand -->
  <requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />


  <!-- Admin Handlers.  TODO? There could be a single handler that loads them all... -->
  <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
  <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
  <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
  <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
  <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
    <lst name="defaults">
     <str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
     <str name="echoHandler">true</str>
    </lst>
  </requestHandler>

  <!-- queryResponseWriter plugins... query responses will be written using the
    writer specified by the 'wt' request parameter matching the name of a registered
    writer.
    The "standard" writer is the default and will be used if 'wt' is not specified
    in the request. XMLResponseWriter will be used if nothing is specified here.
    The json, python, and ruby writers are also available by default.

    <queryResponseWriter name="standard" class="org.apache.solr.request.XMLResponseWriter"/>
    <queryResponseWriter name="json" class="org.apache.solr.request.JSONResponseWriter"/>
    <queryResponseWriter name="python" class="org.apache.solr.request.PythonResponseWriter"/>
    <queryResponseWriter name="ruby" class="org.apache.solr.request.RubyResponseWriter"/>

    <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
  -->

  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.
   -->
  <queryResponseWriter name="xslt" class="org.apache.solr.request.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">5</int>
  </queryResponseWriter>

  <!-- config for the admin interface -->
  <admin>
    <defaultQuery>solr</defaultQuery>
    <gettableFiles>solrconfig.xml schema.xml admin-extra.html</gettableFiles>
    <!-- pingQuery should be "URLish" ...
         &amp; separated key=val pairs ... but there shouldn't be any
         URL escaping of the values -->
    <pingQuery>
     qt=standard&amp;q=solrpingquery
    </pingQuery>
    <!-- configure a healthcheck file for servers behind a loadbalancer
    <healthcheck type="file">server-enabled</healthcheck>
    -->
  </admin>

</config>
